(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{214:function(s,t,e){"use strict";e.r(t);var a=e(2),r=Object(a.a)({},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"멀티플-도커-파일-multiple-compose-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#멀티플-도커-파일-multiple-compose-file","aria-hidden":"true"}},[s._v("#")]),s._v(" * 멀티플 도커 파일 / Multiple Compose file")]),s._v(" "),e("h2",{attrs:{id:"도커-오버라이드-docker-override-default"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#도커-오버라이드-docker-override-default","aria-hidden":"true"}},[s._v("#")]),s._v(" 도커 오버라이드 / Docker override (Default)")]),s._v(" "),e("p",[s._v("도커 컴포즈가 컴포즈 파일을 따로 제시하지 않는 이상, "),e("code",[s._v("docker-compose.yml")]),s._v("을 읽는다는 것은 모두다 아는 사실이다. 하지만 실제로 도커 컴포즈는 기본적으로 다음과 같은 순서로 "),e("U",[s._v("2개의 파일")]),s._v("을 읽는다.")],1),s._v(" "),e("ol",[e("li",[e("code",[s._v("docker-compose.yml")])]),s._v(" "),e("li",[e("code",[s._v("docker-compose.override.yml")]),s._v(" (optional)")])]),s._v(" "),e("p",[e("code",[s._v("docker-compose.override.yml")]),s._v("은 옵셔널이며, 기본적으로는 "),e("code",[s._v("docker-compose.yml")]),s._v("에 베이스 설정을 하고, 오버라이드 파일통해서 해당 설정을 덮어쓰거나 생성한다. 주로 개발환경과 디플로이 환경을 구분하기 위해서 사용한다.")]),s._v(" "),e("h3",{attrs:{id:"default의-예시"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#default의-예시","aria-hidden":"true"}},[s._v("#")]),s._v(" Default의 예시")]),s._v(" "),e("p",[s._v("하기 두개의 컴포즈파일이 동일선상에 있을 경우.")]),s._v(" "),e("h4",{attrs:{id:"예시파일"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예시파일","aria-hidden":"true"}},[s._v("#")]),s._v(" 예시파일")]),s._v(" "),e("ul",[e("li",[e("U",[s._v("docker-compose.yml")])],1)]),s._v(" "),e("div",{staticClass:"language-docker extra-class"},[e("pre",{pre:!0,attrs:{class:"language-docker"}},[e("code",[s._v("version"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3'")]),s._v("\nservices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  basic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    build"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" .\n    command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello from basic'")]),s._v("\n")])])]),e("ul",[e("li",[e("U",[s._v("docker-compose.override.yml")])],1)]),s._v(" "),e("div",{staticClass:"language-docker extra-class"},[e("pre",{pre:!0,attrs:{class:"language-docker"}},[e("code",[s._v("version"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3'")]),s._v("\nservices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  override"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    build"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" .\n    command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello from override'")]),s._v("\n")])])]),e("h4",{attrs:{id:"실행결과"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#실행결과","aria-hidden":"true"}},[s._v("#")]),s._v(" 실행결과")]),s._v(" "),e("p",[e("code",[s._v("docker-compose.yml")]),s._v("과 "),e("code",[s._v("docker-compose.override.yml")]),s._v("이 합쳐진다.")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker-compose config\nservices:\n  basic:\n    build:\n      context: /Users/hidekuma/Documents/private\n    command: "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello from basic'")]),s._v("\n  override:\n    build:\n      context: /Users/hidekuma/Documents/private\n    command: "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello from override'")]),s._v("\nversion: "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3.0'")]),s._v("\n")])])]),e("h4",{attrs:{id:"만약-f커맨드-옵션을-사용할-경우"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#만약-f커맨드-옵션을-사용할-경우","aria-hidden":"true"}},[s._v("#")]),s._v(" 만약 "),e("code",[s._v("-f")]),s._v("커맨드 옵션을 사용할 경우")]),s._v(" "),e("p",[s._v("얼핏보면 두 커맨드가  동일하다고 생각할 수 있으나, "),e("code",[s._v("-f")]),s._v("옵션을 사용하면, 해당 파일만을 읽기 때문에 "),e("code",[s._v("docker-compose.override.yml")]),s._v("은 읽히지 않는다.")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker-compose config "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker-compose.yml + docker-compose.override.yml")]),s._v("\n$ docker-compose -f docker-compose.yml config "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker-compose.yml")]),s._v("\n")])])]),e("hr"),s._v(" "),e("h2",{attrs:{id:"커스텀-도커-오버라이드-custom-override"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#커스텀-도커-오버라이드-custom-override","aria-hidden":"true"}},[s._v("#")]),s._v(" 커스텀 도커 오버라이드 / Custom override")]),s._v(" "),e("p",[s._v("기본적으로 도커 컴포즈가 파일을 읽는 방법에 대해 알아봤는데, 그러면 우리는 꼭 오버라이드 할 파일을 "),e("code",[s._v("docker-compose.override.yml")]),s._v("로 정의해야 할까? "),e("strong",[s._v("방법은 있다. 위에서 잠시 거론했던 "),e("code",[s._v("-f")]),s._v(" 옵션을 사용하면 된다.")]),s._v(" 해당 옵션은 도커 컴포즈 파일의 "),e("code",[s._v("path")]),s._v("를 정의하는 옵션이다. 해당 옵션은 "),e("U",[s._v("복수번")]),s._v(" 사용할 수 있다.")],1),s._v(" "),e("h3",{attrs:{id:"custom의-예시"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#custom의-예시","aria-hidden":"true"}},[s._v("#")]),s._v(" Custom의 예시")]),s._v(" "),e("h4",{attrs:{id:"예시파일-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예시파일-2","aria-hidden":"true"}},[s._v("#")]),s._v(" 예시파일")]),s._v(" "),e("ul",[e("li",[e("U",[s._v("docker-compose.test1.yml")])],1)]),s._v(" "),e("div",{staticClass:"language-docker extra-class"},[e("pre",{pre:!0,attrs:{class:"language-docker"}},[e("code",[s._v("version"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3'")]),s._v("\nservices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  test1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    build"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" .\n    command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello from test1'")]),s._v("\n")])])]),e("ul",[e("li",[e("U",[s._v("docker-compose.test2.yml")])],1)]),s._v(" "),e("div",{staticClass:"language-docker extra-class"},[e("pre",{pre:!0,attrs:{class:"language-docker"}},[e("code",[s._v("version"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3'")]),s._v("\nservices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  test2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    build"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" .\n    command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello from test2'")]),s._v("\n")])])]),e("ul",[e("li",[e("U",[s._v("docker-compose.test3.yml")])],1)]),s._v(" "),e("div",{staticClass:"language-docker extra-class"},[e("pre",{pre:!0,attrs:{class:"language-docker"}},[e("code",[s._v("version"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3'")]),s._v("\nservices"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  test3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    build"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" .\n    command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello from test3'")]),s._v("\n")])])]),e("h4",{attrs:{id:"실행결과-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#실행결과-2","aria-hidden":"true"}},[s._v("#")]),s._v(" 실행결과")]),s._v(" "),e("p",[e("code",[s._v("-f")]),s._v("옵션을 여러 번 사용하였다. 하단 코드의 결과는"),e("code",[s._v("docker-compose.test*.yml")]),s._v("을 모두 오버라이드 한다.")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker-compose -f docker-compose.test1.yml -f docker-compose.test2.yml -f docker-compose.test3.yml config\nservices:\n  test1:\n    build:\n      context: /Users/hidekuma/Documents/private\n    command: "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello from test1'")]),s._v("\n  test2:\n    build:\n      context: /Users/hidekuma/Documents/private\n    command: "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello from test2'")]),s._v("\n  test3:\n    build:\n      context: /Users/hidekuma/Documents/private\n    command: "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello from test3'")]),s._v("\nversion: "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3.0'")]),s._v("\n")])])])])},[],!1,null,null,null);t.default=r.exports}}]);